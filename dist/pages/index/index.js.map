{"version":3,"file":"pages/index/index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAIA;;;;;;;;;;;;;AC5GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;;;;;;;;;;;;;ACHA;AACA;AACA;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://my-taro-to/._src_pages_index_index.jsx","webpack://my-taro-to/./src/pages/index/index.jsx?a295","webpack://my-taro-to/._node_modules_@babel_runtime_helpers_esm_arrayWithoutHoles.js","webpack://my-taro-to/._node_modules_@babel_runtime_helpers_esm_iterableToArray.js","webpack://my-taro-to/._node_modules_@babel_runtime_helpers_esm_nonIterableSpread.js","webpack://my-taro-to/._node_modules_@babel_runtime_helpers_esm_toConsumableArray.js"],"sourcesContent":["import { Component, useState } from 'react'\nimport { View, Text, Input, Button, Checkbox, Icon } from '@tarojs/components'\nimport Taro, { useLoad } from '@tarojs/taro';\nimport classnames from 'classnames'\nimport './index.scss'\nimport FlagSelector from '../../components/flagSelector';\n\nexport default function Index() {\n  const [todo, setTodo] = useState('');\n  const [todoList, setTodoList] = useState([]);\n\n  useLoad(() => {\n    setTodoList(Taro.getStorageSync('todoList') || []);\n  })\n\n  const onInputTodo = (e) => {\n    setTodo(e.currentTarget.value)\n  }\n\n  const updateTodoList = (newList) => {\n    setTodoList(newList)\n    Taro.setStorage({\n      key: 'todoList',\n      data: newList\n    })\n  }\n\n  const onClickAdd = () => {\n    //屏蔽了空字符串的添加\n    if (todo != '') {\n      const newList = [...todoList]\n      newList.unshift({\n        content: todo,\n        completedFlag: false,\n        flag: 'red'\n      })\n      setTodo('')\n      updateTodoList(newList)\n    }\n    // debugger;\n  }\n\n  const onClickDelete = (index) => {\n    const newList = [...todoList]\n    newList.splice(index, 1)\n    updateTodoList(newList)\n  }\n\n  const onClickCheck = (index) => {\n    const newList = [...todoList]\n    newList[index].completedFlag = !newList[index].completedFlag\n\n    var temp = newList[index]\n    newList.splice(index, 1)\n    var idx = 0\n    for (idx = 0; idx < newList.length; idx++) {\n      if (newList[idx].completedFlag == true) {\n        break;\n      }\n    }\n    newList.splice(idx, 0, temp)\n    updateTodoList(newList)\n  }\n\n  const onChangeFlag = (flag, index) => {\n    const newList = [...todoList]\n    newList[index].flag = flag\n    newList[index].flagSelectorVisible = false\n    updateTodoList(newList)\n  }\n\n  const onClickIcon = (index) => {\n    const newList = [...todoList]\n    newList[index].flagSelectorVisible = true\n    updateTodoList(newList)\n  }\n\n  const pages = ['hotel-list', 'comment-list', 'comment-submit', 'comment-review']\n\n  return (\n\n    <View className='todo-page'>\n      <View>\n        {Array.isArray(pages) ? pages.map((item) => (\n          <Button onClick={() => Taro.navigateTo({ url: '../' + item + '/index' })}>{item}页面</Button>\n        )) : null}\n      </View>\n      <Input className='todo-input' value={todo} onInput={onInputTodo}></Input>\n      <Button className='todo-add' onClick={onClickAdd}>添加</Button>\n      {todoList.length == 0 ? null : <Text className='todo-title'>TodoList</Text>}\n      <View className='todo-box'>\n        {/* {console.log(todoList)} */}\n        {Array.isArray(todoList) ? todoList.map((item, index) => (\n          <View className='todo-item' key={index}>\n            <View className={classnames('item-isdo', { done: item.completedFlag })} onClick={(e) => onClickCheck(index)}></View>\n            <Text className='item-text'>{item.content}</Text>\n            <View className='item-icon'>\n              <Icon className='icon-flag' style={{ color: item.flag }} onClick={() => onClickIcon(index)}></Icon>\n              {item.flagSelectorVisible && <FlagSelector flag={item.flag} onChange={(flag) => onChangeFlag(flag, index)} />}\n            </View>\n            <Button className='item-del' onClick={() => onClickDelete(index)}>删除</Button>\n          </View>\n        )) : null}\n      </View>\n      <Text>Hello</Text>\n    </View>\n  )\n\n}\n","import { createPageConfig } from '@tarojs/runtime'\nimport component from \"../../../node_modules/babel-loader/lib/index.js??ruleSet[1].rules[5].use[0]!./index.jsx\"\nvar config = {\"navigationBarTitleText\":\"index\"};\n\n\nvar inst = Page(createPageConfig(component, 'pages/index/index', {root:{cn:[]}}, config || {}))\n\n\n","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}"],"names":[],"sourceRoot":""}