{"version":3,"file":"pages/hotel-list/index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AANA;AAOA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAvBA;AAAA;AAAA;;AAyBA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;;;;;;;;;;;;;;;;;;;AC7HA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AACA;AAGA;AADA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://xiecheng-final-work/._src_pages_hotel-list_index.jsx","webpack://xiecheng-final-work/._src_components_HotelCard_index.jsx","webpack://xiecheng-final-work/._src_components_LoadingDots_index.jsx","webpack://xiecheng-final-work/./src/pages/hotel-list/index.jsx?e695"],"sourcesContent":["import { useState } from 'react'\nimport { View, Input, ScrollView, Picker } from '@tarojs/components'\nimport Taro, { useLoad } from '@tarojs/taro'\nimport './index.scss'\nimport HotelCard from '../../components/HotelCard';\nimport IconFont from '../../components/iconfont';\nimport LoadingDots from '../../components/LoadingDots';\n\nexport default function Index() {\n\n  const [hotelsList, setHotelList] = useState([])\n  const [searchContent, setSearchContent] = useState('') //搜索框内容\n  const [range, setRange] = useState(['不限评分', '不限评价数', '不限价格'])\n  const [scroll, setScroll] = useState(1)//滚动条高度，用于回到顶部\n  //想要修改筛选条件后立即更改页面信息，useState的set操作在请求数据之后执行，所以需要一个可以立即改变值的临时变量\n  var tempRange = ['不限评分', '不限评价数', '不限价格']\n  const rangeScore = ['不限评分', '1分以上', '2分以上', '3分以上', '4分以上', '4.5分以上', '5分']\n  const rangeCommentNum = ['不限评价数', '100评论以上', '500评论以上', '1000评论以上', '5000评论以上', '10000评论以上']\n  const rangePrice = ['不限价格', '100元内', '200元内', '400元内', '800元内', '1600元内']\n\n  useLoad(async () => {\n    refreshHotels()\n  })\n\n  //修改筛选条件\n  const changeRange = (index, content) => {\n    tempRange = [...range]\n    tempRange[index] = content\n    setRange(tempRange)\n    refreshHotels()//重修请求符合条件的数据\n    setScroll((scroll + 1 - Math.random()) % 1)//回滚至顶部，state值发生改变才会触发\n  }\n\n  //点击搜索按钮后触发，搜索含有关键字的酒店\n  const doSearch = () => {\n    if (searchContent != '') {\n      refreshHotels()\n      console.log(\"do search: \" + searchContent)\n    }\n  }\n\n  //向数据库请求数据\n  const getHotels = async () => {\n    document.getElementById('no-hotels').style.visibility = 'hidden'\n    document.getElementById('loading').style.visibility = 'visible'\n    let range = {//筛选条件\n      minScore: parseFloat(tempRange[0]) ? parseFloat(tempRange[0]) : 0,//如果NaN，取默认值\n      minCommentNum: parseFloat(tempRange[1]) ? parseFloat(tempRange[1]) : 0,\n      maxPrice: parseFloat(tempRange[2]) ? parseFloat(tempRange[2]) : 1000000,\n      search: searchContent\n    }\n    console.log(range)\n    const hotels = (await Taro.cloud.callFunction({\n      name: 'get-hotel-list',\n      data: {\n        num: 10,//请求的酒店数据的数量\n        range: range\n      }\n    })).result\n    console.log(hotels)\n    document.getElementById('loading').style.visibility = 'hidden'\n    if (hotels.length === 0) {\n      document.getElementById('no-hotels').style.visibility = 'visible'\n    }\n    return hotels\n  }\n\n  //滑动至底部后触发，请求并追加新的酒店数据\n  const appendHotels = throttle(async () => {\n    //节流，防止在加载时再次被触发\n    tempRange = [...range]\n    const result = await getHotels()\n    setHotelList(hotelsList.concat(result))\n  }, 300, 1000)\n\n  function throttle(func, waitPre, waitPost) {//修改版的节流操作\n    var timeout1;\n    var timeout2 = setTimeout(function () {\n      timeout2 = null\n    }, waitPre);//2、保证刚接收到数据后，页面渲染时不被触发\n\n    return function () {\n      let context = this;\n      let args = arguments;\n      if (!timeout1 && !timeout2) {\n        func.apply(context, args)\n        timeout1 = setTimeout(function () {\n          timeout1 = null\n        }, waitPost)//1、保证刚触发后，向服务端请求数据期间不能再次触发\n      }\n    }\n  }\n\n  //刷新酒店列表数据\n  const refreshHotels = async () => {\n    const result = await getHotels()\n    setHotelList(result)\n  }\n\n  return (\n    <View className='hotal-list-page'>\n      <View className='selector'>\n        <View className='filters'>\n          <Picker className='fliter' range={rangeScore} onChange={(e) => { changeRange(0, rangeScore[e.target.value]) }}>{range[0]}</Picker>\n          <Picker className='fliter' range={rangeCommentNum} onChange={(e) => { changeRange(1, rangeCommentNum[e.target.value]) }}>{range[1]}</Picker>\n          <Picker className='fliter' range={rangePrice} onChange={(e) => { changeRange(2, rangePrice[e.target.value]) }}>{range[2]}</Picker>\n        </View>\n        <View className='searcher'>\n          <Input className='search' onInput={(e) => { setSearchContent(e.target.value) }}>12345</Input>\n          <View className='search-icon' onClick={doSearch}><IconFont name='chazhao' size='50rpx' /></View>\n        </View>\n      </View>\n      <ScrollView className='hotel-cards' scrollY onScrollToLower={(appendHotels)} scrollTop={scroll}>\n        {Array.isArray(hotelsList) && hotelsList.map((item) => (\n          <HotelCard hotelDetails={item} onClick={() => (Taro.navigateTo({\n            url: '../comment-list/index?hotelId=' + item._id + '&hotelName=' + item.name\n          }))} />\n        ))}\n        {/* 加载时显示，其它时候隐藏 */}\n        <View className='tips' id='loading'>正在加载酒店数据...<LoadingDots className='dots' /></View>\n        {/* 无数据时显示，其它时候隐藏 */}\n        <View className='tips' id='no-hotels'>没有符合条件的酒店T_T</View>\n      </ScrollView>\n    </View>\n  )\n}\n","import { View, Image, Text } from '@tarojs/components'\r\nimport { useState } from 'react'\r\nimport './index.scss'\r\nimport StarsScore from '../../components/StarsScore';\r\n\r\n// {/* 酒店卡片 */}\r\nexport default function HotelCard({\r\n    hotelDetails,\r\n    onClick\r\n}) {\r\n    return (\r\n        <View className='hotel-card' onClick={onClick}>\r\n            <View className='card-left'>\r\n                <Image className='hotel-image' src={hotelDetails.image} lazyLoad></Image>\r\n            </View>\r\n            <View className='card-right'>\r\n                <View className='hotel-name'>{hotelDetails.name}</View>\r\n                <View className='comment'>\r\n                    <StarsScore score={hotelDetails.score}></StarsScore>\r\n                    <Text className='comment-score'>{hotelDetails.score.toFixed(1)}分</Text>\r\n                    <Text className='comment-num'>{hotelDetails.commentNum}点评</Text>\r\n                </View>\r\n                <View className='location'>{hotelDetails.location}</View>\r\n                <View className='comment-content'>\"{hotelDetails.comment[Math.floor(Math.random() * hotelDetails.comment.length)]}\"</View>\r\n                <View className='hotel-price'>￥<Text className='cost'>{hotelDetails.price}</Text>起</View>\r\n            </View>\r\n        </View>\r\n    )\r\n}","import { View } from '@tarojs/components'\r\nimport './index.scss'\r\n// {/* 加载动画，转圈的点 */}\r\nexport default function LoadingDots() {\r\n    return (\r\n        <View className='dot-spinner-container'>\r\n            <View class=\"dot-spinner\">\r\n                <View class=\"dot-spinner__dot\"></View>\r\n                <View class=\"dot-spinner__dot\"></View>\r\n                <View class=\"dot-spinner__dot\"></View>\r\n                <View class=\"dot-spinner__dot\"></View>\r\n                <View class=\"dot-spinner__dot\"></View>\r\n                <View class=\"dot-spinner__dot\"></View>\r\n                <View class=\"dot-spinner__dot\"></View>\r\n                <View class=\"dot-spinner__dot\"></View>\r\n            </View>\r\n        </View>\r\n    )\r\n}","import { createPageConfig } from '@tarojs/runtime'\nimport component from \"../../../node_modules/babel-loader/lib/index.js??ruleSet[1].rules[5].use[0]!./index.jsx\"\nvar config = {\"navigationBarTitleText\":\"酒店列表\"};\n\n\nvar inst = Page(createPageConfig(component, 'pages/hotel-list/index', {root:{cn:[]}}, config || {}))\n\n\n"],"names":[],"sourceRoot":""}