type TCallback<T = Partial<TaroGeneral.CallbackResult>> = (res: T) => Promise<void> | void;
interface IMethodParam<T = Partial<TaroGeneral.CallbackResult>> {
    name: string;
    success?: TCallback<T & TaroGeneral.CallbackResult>;
    fail?: TCallback;
    complete?: TCallback;
}
interface IMockPromise {
    resolve?: typeof Promise.resolve | TFunc;
    reject?: typeof Promise.reject | TFunc;
}
declare class MethodHandler<T = Partial<TaroGeneral.CallbackResult>> {
    methodName: string;
    protected __success?: TCallback<T>;
    protected __fail?: TCallback;
    protected __complete?: TCallback;
    protected isHandlerError: boolean;
    constructor({ name, success, fail, complete }: IMethodParam<T>);
    success<U = Record<string, unknown>>(res?: Partial<T> & Partial<TaroGeneral.CallbackResult>, promise?: IMockPromise): Promise<T & U & TaroGeneral.CallbackResult>;
    fail<U = Record<string, unknown>>(res?: Partial<T> & Partial<TaroGeneral.CallbackResult>, promise?: IMockPromise): Promise<T & U & TaroGeneral.CallbackResult>;
}
type TCallbackManagerParam = (...arr: unknown[]) => void;
interface ICallbackManagerOption {
    callback?: TCallbackManagerParam;
    ctx?: any;
    [key: string]: unknown;
}
type TCallbackManagerListItem = (TCallbackManagerParam | ICallbackManagerOption);
type TCallbackManagerList = TCallbackManagerListItem[];
declare class CallbackManager {
    callbacks: TCallbackManagerList;
    /**
     * 添加回调
     * @param {{ callback: function, ctx: any } | function} opt
     */
    add: (opt?: TCallbackManagerListItem) => void;
    /**
     * 移除回调
     * @param {{ callback: function, ctx: any } | function} opt
     */
    remove: (opt?: TCallbackManagerListItem) => void;
    /**
     * 获取回调函数数量
     * @return {number}
     */
    count: () => number;
    /**
     * 触发回调
     * @param  {...any} args 回调的调用参数
     */
    trigger: (...args: TCallbackManagerList) => void;
}
export { MethodHandler, CallbackManager };
