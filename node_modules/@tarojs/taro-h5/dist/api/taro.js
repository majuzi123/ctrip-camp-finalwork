import Taro from '@tarojs/api';
import { history, navigateBack, navigateTo, reLaunch, redirectTo, getCurrentPages, switchTab } from '@tarojs/router';
export { history } from '@tarojs/router';
import { isFunction } from '@tarojs/shared';
import './index.js';
import { permanentlyNotSupport } from '../utils/index.js';
import { getCurrentInstance, getApp } from './framework/index.js';
import { nextTick } from './ui/custom-component.js';

const { Behavior, getEnv, ENV_TYPE, Link, interceptors, getInitPxTransform, Current, options, eventCenter, Events, preload } = Taro;
const taro = {
    // @ts-ignore
    Behavior,
    getEnv,
    ENV_TYPE,
    Link,
    interceptors,
    Current,
    getCurrentInstance,
    options,
    nextTick,
    eventCenter,
    Events,
    preload,
    history,
    navigateBack,
    navigateTo,
    reLaunch,
    redirectTo,
    getCurrentPages,
    switchTab
};
const initPxTransform = getInitPxTransform(taro);
const requirePlugin = permanentlyNotSupport('requirePlugin');
const pxTransform = function (size) {
    const config = taro.config;
    const baseFontSize = config.baseFontSize || 20;
    const designWidth = (((input = 0) => isFunction(config.designWidth)
        ? config.designWidth(input)
        : config.designWidth))(size);
    const rootValue = baseFontSize / config.deviceRatio[designWidth] * 2;
    return Math.ceil((parseInt(size, 10) / rootValue) * 10000) / 10000 + 'rem';
};
const canIUseWebp = function () {
    const canvas = document.createElement('canvas');
    return canvas.toDataURL('image/webp').indexOf('data:image/webp') === 0;
};
taro.requirePlugin = requirePlugin;
taro.getApp = getApp;
taro.pxTransform = pxTransform;
taro.initPxTransform = initPxTransform;
// @ts-ignore
taro.canIUseWebp = canIUseWebp;

export { Behavior, Current, ENV_TYPE, Events, Link, canIUseWebp, taro as default, eventCenter, getEnv, initPxTransform, interceptors, options, preload, pxTransform, requirePlugin };
//# sourceMappingURL=taro.js.map
