"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const eslint_1 = require("eslint");
const glob = require("glob");
const path = require("path");
function default_1({ projectConfig }) {
    return __awaiter(this, void 0, void 0, function* () {
        const appPath = process.cwd();
        const globPattern = glob.sync(path.join(appPath, '.eslintrc*'));
        const eslintCli = new eslint_1.ESLint({
            cwd: process.cwd(),
            useEslintrc: Boolean(globPattern.length),
            baseConfig: {
                extends: [`taro/${projectConfig.framework}`]
            }
        });
        const sourceFiles = path.join(process.cwd(), projectConfig.sourceRoot, '**/*.{js,ts,jsx,tsx}');
        const report = yield eslintCli.lintFiles([sourceFiles]);
        const formatter = yield eslintCli.loadFormatter();
        return {
            desc: '检查 ESLint (以下为 ESLint 的输出)',
            raw: formatter.format(report)
        };
    });
}
exports.default = default_1;
//# sourceMappingURL=eslintValidator.js.map