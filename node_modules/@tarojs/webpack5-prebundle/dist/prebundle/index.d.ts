import { Message } from 'esbuild';
import webpack from 'webpack';
import { getMeasure, Metadata } from '../utils';
import { CollectedDeps } from '../utils/constant';
import type { Config } from '@swc/core';
import type { IProjectBaseConfig } from '@tarojs/taro/types/compile';
import type { Configuration, EntryObject } from 'webpack';
import type Chain from 'webpack-chain';
export declare type IPrebundle = Exclude<IProjectBaseConfig['compiler'], string | undefined>['prebundle'];
export interface IPrebundleConfig {
    appPath: string;
    chain: Chain;
    chunkFilename?: string;
    enableSourceMap: boolean;
    entry: EntryObject;
    entryFileName?: string;
    env: string;
    isWatch?: boolean;
    sourceRoot: string;
}
declare type TMode = 'production' | 'development' | 'none';
export default class BasePrebundle<T extends IPrebundleConfig = IPrebundleConfig> {
    protected config: T;
    protected option: IPrebundle;
    sourceRoot: string;
    appPath: string;
    cacheDir: string;
    chain: Chain;
    customEsbuildConfig: IPrebundle['esbuild'];
    customSwcConfig?: Config;
    env: string;
    mode: TMode;
    prebundleCacheDir: string;
    remoteCacheDir: string;
    metadataPath: string;
    metadata: Metadata;
    preMetadata: Metadata;
    isUseCache: boolean;
    deps: CollectedDeps;
    measure: ReturnType<typeof getMeasure>;
    webpackConfig: Configuration;
    constructor(config: T, option: IPrebundle);
    run(): Promise<void>;
    addPlugin(name: string, plugin: any, ...args: Record<string, any>[]): void;
    get entryPath(): string;
    parseEntries(entry?: EntryObject): string[];
    /** 找出所有 webpack entry */
    getEntries(appJsPath: string): string[];
    setDeps(entries: string[], include?: string[], exclude?: string[]): Promise<void>;
    bundle(): any;
    handleBundleError(errors?: Message[]): any;
    setHost(publicPath?: string): void;
    getRemoteWebpackCompiler(standard: Configuration, custom?: Configuration): webpack.Compiler;
}
export {};
