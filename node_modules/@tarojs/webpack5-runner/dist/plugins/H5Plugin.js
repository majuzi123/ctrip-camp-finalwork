"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const helper_1 = require("@tarojs/helper");
const h5_1 = require("@tarojs/webpack5-prebundle/dist/h5");
const lodash_1 = require("lodash");
const path_1 = __importDefault(require("path"));
const H5AppInstance_1 = __importDefault(require("../utils/H5AppInstance"));
const PLUGIN_NAME = 'TaroH5Plugin';
class TaroH5Plugin {
    constructor(options = {}) {
        this.pagesConfigList = new Map();
        this.pages = new Set();
        this.tryAsync = fn => (arg, callback) => __awaiter(this, void 0, void 0, function* () {
            try {
                yield fn(arg);
                callback();
            }
            catch (err) {
                callback(err);
            }
        });
        this.options = (0, lodash_1.defaults)(options || {}, {
            appPath: '',
            sourceDir: '',
            routerConfig: {},
            entryFileName: 'app',
            framework: helper_1.FRAMEWORK_MAP.NERV,
            frameworkExts: helper_1.SCRIPT_EXT,
            runtimePath: [],
            pxTransformConfig: {
                baseFontSize: 20,
                deviceRatio: {},
                designWidth: 750,
                minRootSize: 20
            },
            prebundle: false
        });
    }
    apply(compiler) {
        const { entry } = compiler.options;
        this.inst = new H5AppInstance_1.default(entry, this.options);
        compiler.hooks.run.tapAsync(PLUGIN_NAME, this.tryAsync(() => {
            this.run();
        }));
        compiler.hooks.watchRun.tapAsync(PLUGIN_NAME, this.tryAsync(() => {
            this.run();
        }));
        compiler.hooks.compilation.tap(PLUGIN_NAME, compilation => {
            compiler.webpack.NormalModule.getCompilationHooks(compilation).loader.tap(PLUGIN_NAME, (_loaderContext, module) => {
                const { framework, entryFileName, appPath, sourceDir, pxTransformConfig, loaderMeta, prebundle, routerConfig } = this.options;
                const { dir, name } = path_1.default.parse(module.resource);
                const suffixRgx = /\.(boot|config)/;
                if (!suffixRgx.test(name))
                    return;
                const filePath = path_1.default.join(dir, name);
                const pageName = filePath.replace(sourceDir + (process.platform === 'win32' ? '\\' : '/'), '').replace(suffixRgx, '');
                const routerMode = (routerConfig === null || routerConfig === void 0 ? void 0 : routerConfig.mode) || 'hash';
                const isMultiRouterMode = routerMode === 'multi';
                const isApp = !isMultiRouterMode && pageName === entryFileName;
                const bootstrap = prebundle && !/\.boot$/.test(name);
                if (isApp || this.inst.pagesConfigList.has(pageName)) {
                    if (bootstrap) {
                        const bootPath = path_1.default.relative(appPath, path_1.default.join(sourceDir, `${isMultiRouterMode ? pageName : entryFileName}.boot.js`));
                        h5_1.VirtualModule.writeModule(bootPath, '/** bootstrap application code */');
                    }
                    module.loaders.push({
                        loader: '@tarojs/taro-loader/lib/h5',
                        options: {
                            bootstrap,
                            config: Object.assign({ router: this.options.routerConfig }, this.inst.appConfig),
                            entryFileName,
                            filename: name.replace(suffixRgx, ''),
                            framework,
                            runtimePath: this.options.runtimePath,
                            loaderMeta,
                            pages: this.inst.pagesConfigList,
                            pxTransformConfig,
                            sourceDir
                        },
                        ident: null,
                        type: null
                    });
                }
            });
        });
    }
    run() {
        delete this.inst.__appConfig;
        delete this.inst.__pages;
        delete this.inst.__pagesConfigList;
    }
}
exports.default = TaroH5Plugin;
//# sourceMappingURL=H5Plugin.js.map