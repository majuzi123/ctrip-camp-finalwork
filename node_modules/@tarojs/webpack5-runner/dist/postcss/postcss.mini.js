"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPostcssPlugins = void 0;
const helper_1 = require("@tarojs/helper");
const path_1 = __importDefault(require("path"));
const resolve_1 = require("resolve");
const platform = process.env.TARO_ENV;
const defaultAutoprefixerOption = {
    enable: true,
    config: {
        flexbox: 'no-2009'
    }
};
const defaultPxtransformOption = {
    enable: true,
    config: {
        platform
    }
};
const defaultUrlOption = {
    enable: true,
    config: {
        url: 'inline'
    }
};
const defaultHtmltransformOption = {
    enable: false,
    config: {
        platform,
        removeCursorStyle: true
    }
};
const optionsWithDefaults = ['autoprefixer', 'pxtransform', 'cssModules', 'url', 'htmltransform'];
const plugins = [];
const getPostcssPlugins = function (appPath, { designWidth, deviceRatio, postcssOption = {} }) {
    if (designWidth) {
        defaultPxtransformOption.config.designWidth = designWidth;
    }
    if (deviceRatio) {
        defaultPxtransformOption.config.deviceRatio = deviceRatio;
    }
    const autoprefixerOption = (0, helper_1.recursiveMerge)({}, defaultAutoprefixerOption, postcssOption.autoprefixer);
    const pxtransformOption = (0, helper_1.recursiveMerge)({}, defaultPxtransformOption, postcssOption.pxtransform);
    const htmltransformOption = (0, helper_1.recursiveMerge)({}, defaultHtmltransformOption, postcssOption.htmltransform);
    const urlOption = (0, helper_1.recursiveMerge)({}, defaultUrlOption, postcssOption.url);
    if (autoprefixerOption.enable) {
        const autoprefixer = require('autoprefixer');
        plugins.push(autoprefixer(autoprefixerOption.config));
    }
    if (pxtransformOption.enable) {
        const pxtransform = require('postcss-pxtransform');
        plugins.push(pxtransform(pxtransformOption.config));
    }
    if (urlOption.enable) {
        const url = require('postcss-url');
        plugins.push(url(urlOption.config));
    }
    if (htmltransformOption === null || htmltransformOption === void 0 ? void 0 : htmltransformOption.enable) {
        const htmlTransform = require('postcss-html-transform');
        plugins.push(htmlTransform(htmltransformOption.config));
    }
    plugins.unshift(require('postcss-import'));
    Object.entries(postcssOption).forEach(([pluginName, pluginOption]) => {
        if (optionsWithDefaults.indexOf(pluginName) > -1)
            return;
        if (!pluginOption || !pluginOption.enable)
            return;
        if (!(0, helper_1.isNpmPkg)(pluginName)) { // local plugin
            pluginName = path_1.default.join(appPath, pluginName);
        }
        try {
            const pluginPath = (0, resolve_1.sync)(pluginName, { basedir: appPath });
            plugins.push(require(pluginPath)(pluginOption.config || {}));
        }
        catch (e) {
            const msg = e.code === 'MODULE_NOT_FOUND' ? `缺少postcss插件${pluginName}, 已忽略` : e;
            console.log(msg);
        }
    });
    return plugins;
};
exports.getPostcssPlugins = getPostcssPlugins;
//# sourceMappingURL=postcss.mini.js.map