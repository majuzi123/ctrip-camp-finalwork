import Vue from 'vue';
declare const Ad: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const AdCustom: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const AnimationVideo: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const AnimationView: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const ArCamera: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const Audio: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    src: string;
    controls: boolean;
    autoplay: boolean;
    loop: boolean;
    muted: boolean;
    nativeProps: {};
}>;
declare const AwemeData: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const Block: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const Button: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    disabled: boolean;
    hoverClass: string;
    type: string;
    hoverStartTime: number;
    hoverStayTime: number;
    size: string;
    plain: boolean;
    loading: boolean;
    formType: "submit" | "reset";
}>;
declare const Camera: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const Canvas: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    canvasId: string;
    nativeProps: {};
}>;
declare const ChannelLive: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const ChannelVideo: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const Checkbox: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    name: string;
    value: string;
    color: string;
    id: string;
    checked: boolean;
    disabled: boolean;
    nativeProps: {};
}>;
declare const CheckboxGroup: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    name: any;
}>;
declare const CommentDetail: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const CommentList: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const ContactButton: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const CoverImage: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    src: string;
    nativeProps: {};
}>;
declare const CoverView: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    animation: string;
    hoverClass: string;
    hoverStartTime: number;
    hoverStayTime: number;
}>;
declare const CustomWrapper: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const Editor: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const FollowSwan: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const Form: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const FunctionalPageNavigator: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const Icon: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    type: import("@tarojs/components/dist/types/components/icon/icon").Type;
    size: string | number;
    color: string;
}>;
declare const Image: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    src: string;
    mode: import("@tarojs/components/dist/types/components/image/image").Mode;
    lazyLoad: boolean;
    nativeProps: {};
}>;
declare const InlinePaymentPanel: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const Input: import("vue/types/vue").ExtendedVue<Vue, unknown, {
    focus: () => Promise<void>;
}, unknown, {
    value: string;
    type: string;
    password: boolean;
    placeholder: string;
    disabled: boolean;
    maxlength: number;
    autoFocus: boolean;
    confirmType: string;
    name: string;
    nativeProps: {};
}>;
declare const KeyboardAccessory: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const Label: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    for: string;
}>;
declare const Lifestyle: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const Like: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const LivePlayer: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const LivePusher: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const Login: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const Lottie: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const Map: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const MatchMedia: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const MovableArea: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    scaleArea: boolean;
}>;
declare const MovableView: import("vue/types/vue").ExtendedVue<Vue, unknown, {
    setParent: ({ element, area }: {
        element: HTMLElement;
        area: {
            width: number;
            height: number;
        };
    }) => Promise<void>;
    endScale: () => Promise<void>;
    setScale: (scale: number) => Promise<void>;
}, unknown, {
    x: string | number;
    y: string | number;
    direction: "all" | "vertical" | "horizontal" | "none";
    outOfBounds: boolean;
    inertia: boolean;
    friction: number;
    damping: number;
    disabled: boolean;
    scale: boolean;
    scaleMin: number;
    scaleMax: number;
    scaleValue: number;
    animation: boolean;
}>;
declare const NativeSlot: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const NavigationBar: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const Navigator: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    hoverClass: string;
    url: string;
    openType: string;
    isHover: boolean;
    delta: number;
}>;
declare const OfficialAccount: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const OpenData: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const PageContainer: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const PageMeta: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const Picker: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    mode: import("@tarojs/components/dist/types/components/image/image").Mode;
    disabled: boolean;
    range: any[];
    rangeKey: string;
    value: string | number | number[];
    start: string;
    end: string;
    fields: import("@tarojs/components/dist/types/components/picker/picker").Fields;
    name: string;
}>;
declare const PickerGroup: import("vue/types/vue").ExtendedVue<Vue, unknown, {
    handleMoveStart: (clientY: number) => Promise<void>;
    handleMoving: (clientY: number) => Promise<void>;
    handleMoveEnd: (clientY: number) => Promise<void>;
}, unknown, {
    mode: "time" | "date";
    range: any[];
    rangeKey: string;
    height: number;
    columnId: string;
    updateHeight: (height: number, columnId: string, needRevise?: boolean) => void;
    onColumnChange: (height: number, columnId: string) => void;
    updateDay: (value: number, fields: number) => void;
}>;
declare const PickerViewColumn: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    col: string;
    initialPosition: string;
    paddingVertical: number;
}>;
declare const PickerView: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    indicatorStyle: string;
    indicatorClass: string;
    value: number[];
    maskStyle: string;
    maskClass: string;
}>;
declare const Progress: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    percent: number;
    showInfo: boolean;
    borderRadius: string | number;
    fontSize: string | number;
    strokeWidth: string | number;
    activeColor: string;
    backgroundColor: string;
    active: boolean;
}>;
declare const PullToRefresh: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    prefixCls: string;
    distanceToRefresh: number;
    damping: number;
    indicator: {
        activate: string;
        deactivate: string;
        release: string;
        finish: string;
    };
}>;
declare const Radio: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    name: string;
    value: string;
    id: string;
    checked: boolean;
    disabled: boolean;
    nativeProps: {};
}>;
declare const RadioGroup: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    name: any;
}>;
declare const RichText: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    nodes: import("@tarojs/components/dist/types/components/rich-text/rich-text").Nodes;
}>;
declare const RootPortal: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const RtcRoom: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const RtcRoomItem: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const ScrollView: import("vue/types/vue").ExtendedVue<Vue, unknown, {
    mpScrollToMethod: (object: import("@tarojs/taro").ScrollViewContext.scrollTo.Option) => Promise<void>;
    mpScrollIntoViewMethod: (selector: string) => Promise<void>;
}, unknown, {
    scrollX: boolean;
    scrollY: boolean;
    upperThreshold: string | number;
    lowerThreshold: string | number;
    mpScrollTop: string | number;
    mpScrollLeft: string | number;
    mpScrollIntoView: string;
    animated: boolean;
}>;
declare const ShareElement: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const Slider: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    min: number;
    max: number;
    step: number;
    disabled: boolean;
    value: number;
    activeColor: string;
    backgroundColor: string;
    blockSize: number;
    blockColor: string;
    showValue: boolean;
    name: string;
}>;
declare const Slot: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const Swiper: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    indicatorDots: boolean;
    indicatorColor: string;
    indicatorActiveColor: string;
    autoplay: boolean;
    current: number;
    interval: number;
    duration: number;
    circular: boolean;
    vertical: boolean;
    previousMargin: string;
    nextMargin: string;
    displayMultipleItems: number;
    full: boolean;
    zoom: boolean;
}>;
declare const SwiperItem: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    itemId: string;
}>;
declare const Switch: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    type: string;
    checked: boolean;
    color: string;
    name: string;
    disabled: boolean;
    nativeProps: {};
}>;
declare const TabItem: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const Tabbar: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    conf: import("@tarojs/components/dist/types/components/tabbar/tabbar").Conf;
}>;
declare const Tabs: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const Text: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    selectable: boolean;
}>;
declare const Textarea: import("vue/types/vue").ExtendedVue<Vue, unknown, {
    focus: () => Promise<void>;
}, unknown, {
    value: string;
    placeholder: string;
    disabled: boolean;
    maxlength: number;
    autoFocus: boolean;
    autoHeight: boolean;
    name: string;
    nativeProps: {};
}>;
declare const VideoControl: import("vue/types/vue").ExtendedVue<Vue, unknown, {
    setProgressBall: (percentage: number) => Promise<void>;
    toggleVisibility: (nextVisible?: boolean) => Promise<void>;
    getIsDraggingProgressBall: () => Promise<boolean>;
    setCurrentTime: (time: number) => Promise<void>;
}, unknown, {
    controls: boolean;
    currentTime: number;
    duration: number;
    isPlaying: boolean;
    pauseFunc: () => void;
    playFunc: () => void;
    seekFunc: (position: number) => void;
    showPlayBtn: boolean;
    showProgress: boolean;
}>;
declare const Video: import("vue/types/vue").ExtendedVue<Vue, unknown, {
    getHlsObject: () => Promise<HLS>;
    play: () => Promise<void>;
    pause: () => Promise<void>;
    stop: () => Promise<void>;
    seek: (position: number) => Promise<void>;
    requestFullScreen: () => Promise<void>;
    exitFullScreen: () => Promise<void>;
}, unknown, {
    src: string;
    duration: number;
    controls: boolean;
    autoplay: boolean;
    loop: boolean;
    muted: boolean;
    initialTime: number;
    poster: string;
    objectFit: "contain" | "fill" | "cover";
    showProgress: boolean;
    showFullscreenBtn: boolean;
    showPlayBtn: boolean;
    showCenterPlayBtn: boolean;
    showMuteBtn: boolean;
    danmuList: [];
    danmuBtn: boolean;
    enableDanmu: boolean;
    enablePlayGesture: boolean;
    enableProgressGesture: boolean;
    vslideGesture: boolean;
    vslideGestureInFullscreen: boolean;
    nativeProps: {};
}>;
declare const VideoDanmu: import("vue/types/vue").ExtendedVue<Vue, unknown, {
    sendDanmu: (danmuList?: Partial<import("@tarojs/components/dist/types/components/video/video-danmu").Danmu> | Partial<import("@tarojs/components/dist/types/components/video/video-danmu").Danmu>[]) => Promise<void>;
    tick: (currentTime: number) => Promise<void>;
}, unknown, {
    enable: boolean;
}>;
declare const View: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    animation: string;
    hoverClass: string;
    hoverStartTime: number;
    hoverStayTime: number;
}>;
declare const VoipRoom: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, Record<never, any>>;
declare const WebView: import("vue/types/vue").ExtendedVue<Vue, unknown, unknown, unknown, {
    src: string;
}>;
export { Ad, AdCustom, AnimationVideo, AnimationView, ArCamera, Audio, AwemeData, Block, Button, Camera, Canvas, ChannelLive, ChannelVideo, Checkbox, CheckboxGroup, CommentDetail, CommentList, ContactButton, CoverImage, CoverView, CustomWrapper, Editor, FollowSwan, Form, FunctionalPageNavigator, Icon, Image, InlinePaymentPanel, Input, KeyboardAccessory, Label, Lifestyle, Like, LivePlayer, LivePusher, Login, Lottie, Map, MatchMedia, MovableArea, MovableView, NativeSlot, NavigationBar, Navigator, OfficialAccount, OpenData, PageContainer, PageMeta, Picker, PickerGroup, PickerViewColumn, PickerView, Progress, PullToRefresh, Radio, RadioGroup, RichText, RootPortal, RtcRoom, RtcRoomItem, ScrollView, ShareElement, Slider, Slot, Swiper, SwiperItem, Switch, TabItem, Tabbar, Tabs, Text, Textarea, VideoControl, Video, VideoDanmu, View, VoipRoom, WebView };
